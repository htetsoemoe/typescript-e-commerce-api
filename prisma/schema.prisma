// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum OrderEventStatus {
  PENDING
  ACCEPTED
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

model User {
  id                     Int    @id @default(autoincrement())
  name                   String
  email                  String @unique
  password               String
  role                   Role   @default(USER)
  defaultShippingAddress Int?
  defaultBillingAddress  Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  addresses Address[] // onetomany relationship (One user can have many address)
  cartItems CartItem[]
  order     Order[]

  @@map("users")
}

model Address {
  id        Int      @id @default(autoincrement())
  lineOne   String
  lineTwo   String?
  city      String
  country   String
  pincode   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    Int?

  @@map("addresses")
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  price       Decimal
  tags        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  cartItems CartItem[]
  orders    OrderProduct[]

  @@map("products")
}

model CartItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int

  @@map("cart_item")
}

model Order {
  id        Int              @id @default(autoincrement())
  netAmount Decimal
  address   String
  userId    Int
  user      User             @relation(fields: [userId], references: [id])
  status    OrderEventStatus @default(PENDING)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  products OrderProduct[]
  events   OrderEvent[]

  @@map("orders")
}

model OrderProduct {
  id        Int      @id @default(autoincrement())
  orderId   Int
  order     Order    @relation(fields: [orderId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_products")
}

model OrderEvent {
  id        Int              @id @default(autoincrement())
  orderId   Int
  order     Order            @relation(fields: [orderId], references: [id])
  status    OrderEventStatus @default(PENDING)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@map("order_events")
}
